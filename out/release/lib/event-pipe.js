// Generated by CoffeeScript 1.9.3
(function() {
  var EventEmitter, EventPipe, isArray, isFunction, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  EventEmitter = require("events").EventEmitter;

  ref = require('util'), isArray = ref.isArray, isFunction = ref.isFunction;

  EventPipe = (function(superClass) {
    extend(EventPipe, superClass);

    function EventPipe() {
      var cbs;
      cbs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.list = [];
      this._setContainer();
      this.reset();
      if (cbs.length) {
        this.add.apply(this, cbs);
      }
    }

    EventPipe.prototype._setContainer = function() {
      this.container = (function(_this) {
        return function() {
          var args, cb, cbs, err, i, lazy, len, ref1, ref2, results, type;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          if (_this.stopped) {
            _this.emit('stopped', _this.container);
            return;
          }
          if (_this.pointer >= _this.list.length) {
            _this.emit('drain', _this.container);
            return;
          }
          ref1 = _this.list[_this.pointer], type = ref1[0], cbs = ref1[1], lazy = ref1[2];
          if (lazy) {
            ref2 = args, err = ref2[0], args = 2 <= ref2.length ? slice.call(ref2, 1) : [];
            if (err) {
              _this.emit('error', err);
              _this.stop();
              return;
            }
          }
          if (_this.flag-- > 0) {
            _this.parArgs.push(args);
          }
          if (_this.flag === 0 && _this.parArgs.length !== 0) {
            args = _this.parArgs;
            _this.parArgs = [];
          }
          if (_this.flag > 0) {
            return;
          }
          _this.pointer++;
          switch (type) {
            case 'seq':
              return cbs.apply(_this.container, args);
            case 'par':
              _this.flag = cbs.length;
              results = [];
              for (i = 0, len = cbs.length; i < len; i++) {
                cb = cbs[i];
                results.push(cb.apply(_this.container, args));
              }
              return results;
          }
        };
      })(this);
      this.container.stop = (function(_this) {
        return function() {
          return _this.stop();
        };
      })(this);
      return this.container;
    };

    EventPipe.prototype.add = function() {
      var cb, cbs, i, len;
      cbs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      for (i = 0, len = cbs.length; i < len; i++) {
        cb = cbs[i];
        if (isFunction(cb)) {
          this.seq(cb);
        } else if (isArray(cb)) {
          this.par.apply(this, cb);
        }
      }
      return this;
    };

    EventPipe.prototype.lazy = function() {
      var cb, cbs, i, len;
      cbs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      for (i = 0, len = cbs.length; i < len; i++) {
        cb = cbs[i];
        if (isFunction(cb)) {
          this.lseq(cb);
        } else if (isArray(cb)) {
          this.lpar.apply(this, cb);
        }
      }
      return this;
    };

    EventPipe.prototype.seq = function() {
      var cb, cbs, i, len;
      cbs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      for (i = 0, len = cbs.length; i < len; i++) {
        cb = cbs[i];
        this.list.push(['seq', cb]);
      }
      return this;
    };

    EventPipe.prototype.lseq = function() {
      var cb, cbs, i, len;
      cbs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      for (i = 0, len = cbs.length; i < len; i++) {
        cb = cbs[i];
        this.list.push(['seq', cb, true]);
      }
      return this;
    };

    EventPipe.prototype.par = function() {
      var cbs;
      cbs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.list.push(['par', cbs]);
      return this;
    };

    EventPipe.prototype.lpar = function() {
      var cbs;
      cbs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.list.push(['par', cbs, true]);
      return this;
    };

    EventPipe.prototype.run = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.container.apply(this, args);
      return this;
    };

    EventPipe.prototype.stop = function() {
      this.stopped = true;
      this.emit('stop');
      return this;
    };

    EventPipe.prototype.reset = function() {
      this.flag = this.pointer = 0;
      this.parArgs = [];
      return this;
    };

    return EventPipe;

  })(EventEmitter);

  module.exports = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(EventPipe, args, function(){});
  };

}).call(this);
