// Generated by CoffeeScript 1.10.0
var EventPipe, events, isArray,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

events = require("events");

isArray = function(arg) {
  return Object.prototype.toString.call(arg) === '[object Array]';
};

EventPipe = (function(superClass) {
  extend(EventPipe, superClass);

  function EventPipe() {
    var cbs;
    cbs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    this.list = [];
    this.reset();
    if (cbs.length === 0) {
      return;
    }
    this.add.apply(this, cbs);
  }

  EventPipe.prototype.getContainer = function() {
    var container;
    container = (function(_this) {
      return function() {
        var args, cb, cb1, err, i, lazy, len, ref, ref1, type;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        if (_this.stopped) {
          _this.emit('stopped', _this.container);
          return;
        }
        if (_this.pointer >= _this.list.length) {
          _this.emit('drain', _this.container);
          return;
        }
        ref = _this.list[_this.pointer], type = ref[0], cb = ref[1], lazy = ref[2];
        if (lazy) {
          ref1 = args, err = ref1[0], args = 2 <= ref1.length ? slice.call(ref1, 1) : [];
          if (err) {
            _this.emit('error', err);
            _this.stop();
            return;
          }
        }
        if (_this.flag-- > 0) {
          _this.parArgs.push(args);
        }
        if (_this.flag === 0 && _this.parArgs.length !== 0) {
          args = _this.parArgs;
          _this.parArgs = [];
        }
        if (_this.flag > 0) {
          return;
        }
        _this.pointer++;
        if (type === 'seq') {
          cb.apply(_this.container, args);
        } else if (type === 'par') {
          _this.flag = cb.length;
          for (i = 0, len = cb.length; i < len; i++) {
            cb1 = cb[i];
            cb1.apply(_this.container, args);
          }
        }
      };
    })(this);
    container.__stop = (function(_this) {
      return function() {
        return _this.stop();
      };
    })(this);
    return this.container = container;
  };

  EventPipe.prototype.add = function() {
    var cb, cbs, i, len;
    cbs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    for (i = 0, len = cbs.length; i < len; i++) {
      cb = cbs[i];
      if (typeof cb === 'function') {
        this.seq(cb);
      } else if (isArray(cb)) {
        this.par.apply(this, cb);
      }
    }
    return this;
  };

  EventPipe.prototype.lazy = function() {
    var cb, cbs, i, len;
    cbs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    for (i = 0, len = cbs.length; i < len; i++) {
      cb = cbs[i];
      if (typeof cb === 'function') {
        this.lseq(cb);
      } else if (isArray(cb)) {
        this.lpar.apply(this, cb);
      }
    }
    return this;
  };

  EventPipe.prototype.seq = function() {
    var cb, cbs, i, len;
    cbs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    for (i = 0, len = cbs.length; i < len; i++) {
      cb = cbs[i];
      this.list.push(['seq', cb]);
    }
    return this;
  };

  EventPipe.prototype.lseq = function() {
    var cb, cbs, i, len;
    cbs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    for (i = 0, len = cbs.length; i < len; i++) {
      cb = cbs[i];
      this.list.push(['seq', cb, true]);
    }
    return this;
  };

  EventPipe.prototype.par = function() {
    var cbs;
    cbs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    this.list.push(['par', cbs]);
    return this;
  };

  EventPipe.prototype.lpar = function() {
    var cbs;
    cbs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    this.list.push(['par', cbs, true]);
    return this;
  };

  EventPipe.prototype.run = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    this.container.apply(this, args);
    return this;
  };

  EventPipe.prototype.stop = function() {
    this.stopped = true;
    this.emit('stop');
    return this;
  };

  EventPipe.prototype.reset = function() {
    this.flag = this.pointer = 0;
    this.parArgs = [];
    this.getContainer();
    return this;
  };

  return EventPipe;

})(events.EventEmitter);

module.exports = function() {
  var args;
  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(EventPipe, args, function(){});
};
